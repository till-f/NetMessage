variables:
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    versionKind: 'rc'
  ${{ else }}:
    versionKind: 'pre'

name: 1.0.0-$(versionKind)$(Rev:rrr)

trigger:
- main
- topics/*

jobs:
- job: 'BuildAndPublish'
  pool:
    vmImage: 'windows-latest'
  variables:
    solution: '**/*.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
    
  steps:
  - task: PowerShell@2
    displayName: 'Setup Environment'
    inputs:
      targetType: 'inline'
      script: |
        # split build number to get version for NuGet packages
        $parts = "$(Build.BuildNumber)".Split("-")
        $versionPrefix = $parts[0]
        if ("$(Build.SourceBranch)" -eq "refs/heads/main") {
          $versionSuffix = ""
        } else {
          $versionSuffix = $parts[1]
        }
        Write-Host "##vso[task.setvariable variable=versionPrefix;]$versionPrefix"
        Write-Host "##vso[task.setvariable variable=versionSuffix;]$versionSuffix"
        # speed up NuGet restore
        $env:NUGET_CERT_REVOCATION_MODE = "offline"

  - task: NuGetToolInstaller@1
    displayName: 'Install NuGet'
    
  - task: NuGetCommand@2
    displayName: 'NuGet Restore'
    inputs:
      restoreSolution: '$(solution)'
  
  - task: VSBuild@1
    displayName: 'Build'
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
      msbuildArgs: '/p:VersionPrefix=$(versionPrefix) /p:VersionSuffix=$(versionSuffix)'
  
  - task: VSTest@2
    displayName: 'Test'
    inputs:
      testAssemblyVer2: |-
        **\*Test.dll
        !**\obj\**
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
      resultsFolder: '$(Agent.TempDirectory)\TestResults'
      runSettingsFile: '$(Build.SourcesDirectory)\Tests.runsettings'

  - task: CopyFiles@2
    displayName: 'Copy Artifacts'
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: '**\bin\Release\*.nupkg'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true
  
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Packages'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'Packages'
  
  - task: PublishPipelineArtifact@1
    displayName: 'Publish TestResults'
    inputs:
      targetPath: '$(Agent.TempDirectory)\TestResults'
      artifactName: 'TestResults'
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Agent.TempDirectory)\TestResults\*\In\*\*.cobertura.xml'
    condition: succeededOrFailed()
        